// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContactList />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
           Contacts 
        </h1>,
        <div
          className="ContactsSearch"
        >
          <input
            onChange={[Function]}
            placeholder="Search"
            type="text"
          />
        </div>,
        <div
          className="ContactsSort"
        >
          <select
            onChange={[Function]}
            value="Sort"
          >
            <option
              value="Sort"
            >
              Sort
            </option>
            <option
              value="Ascending"
            >
              Ascending
            </option>
            <option
              value="Descending"
            >
              Descending
            </option>
          </select>
        </div>,
        <div
          className="Contacts"
        />,
      ],
      "className": "ContactListMain",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " Contacts ",
        },
        "ref": null,
        "rendered": " Contacts ",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            onChange={[Function]}
            placeholder="Search"
            type="text"
          />,
          "className": "ContactsSearch",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "onChange": [Function],
            "placeholder": "Search",
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <select
            onChange={[Function]}
            value="Sort"
          >
            <option
              value="Sort"
            >
              Sort
            </option>
            <option
              value="Ascending"
            >
              Ascending
            </option>
            <option
              value="Descending"
            >
              Descending
            </option>
          </select>,
          "className": "ContactsSort",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value="Sort"
              >
                Sort
              </option>,
              <option
                value="Ascending"
              >
                Ascending
              </option>,
              <option
                value="Descending"
              >
                Descending
              </option>,
            ],
            "onChange": [Function],
            "value": "Sort",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sort",
                "value": "Sort",
              },
              "ref": null,
              "rendered": "Sort",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Ascending",
                "value": "Ascending",
              },
              "ref": null,
              "rendered": "Ascending",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Descending",
                "value": "Descending",
              },
              "ref": null,
              "rendered": "Descending",
              "type": "option",
            },
          ],
          "type": "select",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": "Contacts",
        },
        "ref": null,
        "rendered": Array [],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
             Contacts 
          </h1>,
          <div
            className="ContactsSearch"
          >
            <input
              onChange={[Function]}
              placeholder="Search"
              type="text"
            />
          </div>,
          <div
            className="ContactsSort"
          >
            <select
              onChange={[Function]}
              value="Sort"
            >
              <option
                value="Sort"
              >
                Sort
              </option>
              <option
                value="Ascending"
              >
                Ascending
              </option>
              <option
                value="Descending"
              >
                Descending
              </option>
            </select>
          </div>,
          <div
            className="Contacts"
          />,
        ],
        "className": "ContactListMain",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " Contacts ",
          },
          "ref": null,
          "rendered": " Contacts ",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              onChange={[Function]}
              placeholder="Search"
              type="text"
            />,
            "className": "ContactsSearch",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "onChange": [Function],
              "placeholder": "Search",
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <select
              onChange={[Function]}
              value="Sort"
            >
              <option
                value="Sort"
              >
                Sort
              </option>
              <option
                value="Ascending"
              >
                Ascending
              </option>
              <option
                value="Descending"
              >
                Descending
              </option>
            </select>,
            "className": "ContactsSort",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  value="Sort"
                >
                  Sort
                </option>,
                <option
                  value="Ascending"
                >
                  Ascending
                </option>,
                <option
                  value="Descending"
                >
                  Descending
                </option>,
              ],
              "onChange": [Function],
              "value": "Sort",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Sort",
                  "value": "Sort",
                },
                "ref": null,
                "rendered": "Sort",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Ascending",
                  "value": "Ascending",
                },
                "ref": null,
                "rendered": "Ascending",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Descending",
                  "value": "Descending",
                },
                "ref": null,
                "rendered": "Descending",
                "type": "option",
              },
            ],
            "type": "select",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "Contacts",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
